/**
 * Created by brugnara on 14/07/16,
 * @ daniele@brugnara.me
 */

'use strict';

const Router = require('koa-router');
const koaBody = require('koa-body');
const Debug = require('debug');
const DEFAULT_SCOPE = 'corso:api';
const chance = new (require('chance'))();
const fs = require('fs');
const cofs = require('co-fs');
const PATH = './big.file';
const Transform = require('transform');

module.exports = function (options) {

  options = options || {};

  const router = new Router();
  const debug = Debug(options.scope || DEFAULT_SCOPE);

  let keys = {};

  // get

  router.get('/', function*(next) {

    this.body = {
      status: 'ok',
      data: {}
    };

    yield next;

  });

  router.get('/create-file', function *(next) {
    let write = fs.createWriteStream(PATH, 'utf8');
    let lines = 1000000;

    let i = 0;

    while (i++ < lines) {
      write.write(chance.sentence() + '\n');
    }
    write.end();

    this.body = {
      status: 'ok',
      lines: lines
    };

    yield next;
  });

  // lettura

  router.get('/text-full', function *(next) {
    this.body = yield new Promise(function(ack, reject) {
      fs.readFile(PATH, 'utf8', (err, file) => {
        if (err) {
          return reject(err);
        }
        ack(file);

      });
    });

    yield next;
  });

  router.get('/text-full-co', function *(next) {
    this.body = yield cofs.readFile(PATH, 'utf8');
    yield next;
  });

  router.get('/text-stream', function *(next) {
    this.body = fs.createReadStream(PATH, 'utf8');
    yield next;
  });

  router.get('/transform', function *(next) {
    let read = fs.createReadStream(PATH, {encoding: 'utf8'});

    this.body = read.pipe(new Transform({encoding: 'utf8'}));

    yield next;
  });

  router.get('/key/:id?', function*(next) {
    this.body = {
      status: 'ok'
    };

    if (this.params.id) {
      this.body.value = keys[this.params.id] || null;
      this.body.found = !!this.body.value;
    } else {
      this.body.keys = Object.keys(keys);
    }

    this.status = this.body.found ? 200 : 404;

    yield next;
  });

  router.post('/key/:id/:value', function*(next) {

    let oldValue = keys[this.params.id];

    keys[this.params.id] = this.params.value;

    this.body = {
      status: 'ok',
      value: {
        old: oldValue,
        new: keys[this.params.id]
      }
    };

    yield next;
  });

  // curl 192.168.0.201:3000/api/sentence

  router.get('/sentence', function*(next) {
    this.body = {
      status: 'ok',
      sentence: chance.sentence()
    };
    yield next;
  });

  router.post('/counter/:type?', koaBody(), function*(next) {
    let count;

    if (this.params.type && !this.request.body.sentence) {
      let error = new Error('missing sentence!');
      error.status = 400;
      return this.throw(error);
    }

    switch (this.params.type) {
      case 'words':
        count = this.request.body.sentence.split(' ').length;
        break;
      case 'chars':
        count = this.request.body.sentence.replace(/\s/g, '').split('').length;
        break;
      default:
        this.body = {
          status: 'ok',
          commands: ['words', 'chars']
        }
    }

    if (count) {
      this.body = {
        status: 'ok',
        count: count
      };
    }

    yield next;
  });

  router.get('/error', function*() {
    throw new Error(chance.sentence())
  });

  return router;

};

